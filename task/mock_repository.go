// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package task

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ids
func (_m *MockRepository) Delete(ids ...uint) ([]*Task, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*Task
	if rf, ok := ret.Get(0).(func(...uint) []*Task); ok {
		r0 = rf(ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...uint) error); ok {
		r1 = rf(ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: userID
func (_m *MockRepository) Find(userID uint) ([]*Task, error) {
	ret := _m.Called(userID)

	var r0 []*Task
	if rf, ok := ret.Get(0).(func(uint) []*Task); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: t
func (_m *MockRepository) Store(t *Task) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Task) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: t
func (_m *MockRepository) Update(t *Task) (*Task, error) {
	ret := _m.Called(t)

	var r0 *Task
	if rf, ok := ret.Get(0).(func(*Task) *Task); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Task) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
